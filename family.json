{"openapi":"3.0.3","info":{"title":"Family budget API","description":"API for calculation and planning of expenses and family expenses","termsOfService":"Terms of service","contact":{"name":"Mikhail Artemev","email":"artemev1986@gmail.com"},"license":{"name":"License of API","url":"API license URL"},"version":"0.0.1"},"servers":[{"url":"http://localhost:8080","description":"Inferred Url"}],"tags":[{"name":"account-controller","description":"Account Controller"},{"name":"auth-controller","description":"Controller for registration and activation users and for authentication"},{"name":"category-controller","description":"Category Controller"},{"name":"user-controller","description":"User Controller"}],"paths":{"/accounts":{"get":{"tags":["account-controller"],"summary":"Get accounts user email","description":"This code is an endpoint for retrieving accounts by user email. It takes in several parameters, including an authorization token, the user's email, a starting index (from) for pagination, and a maximum (size) number of results to return.","operationId":"getAccountsUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"from","in":"query","description":"from","required":false,"style":"form","schema":{"type":"integer","format":"int32"}},{"name":"size","in":"query","description":"size","required":false,"style":"form","schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/AccountDto"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"put":{"tags":["account-controller"],"summary":"Update an existing account","description":"Updates an existing account for the user with the specified email.\n\nThe email should be provided as a request parameter and the updated account details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the updated account.","operationId":"updateAccountUsingPUT","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccountDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/AccountDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"post":{"tags":["account-controller"],"summary":"Create a new account","description":"Creates a new account for the user with the specified email.\n\nThe email should be provided as a request parameter and the account details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the created account.","operationId":"addAccountUsingPOST","parameters":[{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewAccountDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/AccountDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/accounts/{accountId}":{"get":{"tags":["account-controller"],"summary":"getAccountById","operationId":"getAccountByIdUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"accountId","in":"path","description":"accountId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/AccountDto"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"delete":{"tags":["account-controller"],"summary":"Delete an existing account","description":"Deletes an existing account for the user with the specified email.\n\nThe email should be provided as a request parameter and the account ID should be provided as a path variable.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns a ResponseEntity with a status code of 200 OK.","operationId":"deleteAccountUsingDELETE","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"accountId","in":"path","description":"accountId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}},"204":{"description":"No Content"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}}}},"/activate/{code}":{"get":{"tags":["auth-controller"],"summary":"Activation registered user","description":"Returns a result about the activation status","operationId":"activateUsingGET","parameters":[{"name":"code","in":"path","description":"code","required":true,"style":"simple","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/auth/logout":{"post":{"tags":["auth-controller"],"summary":"Logout user","description":"Returns the token success lock result","operationId":"logoutUsingPOST","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"string"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/authentication":{"post":{"tags":["auth-controller"],"summary":"User authentication","description":"The username and password are sent in json format. The body of the request is the AuthenticationRequest class. If the name and password match the entry in the database, then a token is generated and sent in json format. The body of the response is the AuthenticationResponse class. Else an appropriate exception will be thrown.","operationId":"authenticationUsingPOST","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthenticationRequest"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/AuthenticationResponse"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/registration":{"post":{"tags":["auth-controller"],"summary":"Registration new user","description":"The email, firstName, lastName, currency, password and confirmPassword are sent in json format. The body of the request is the RegistrationRequest class. Add new user with password to database. The body of the response is the UserDto class (it contains id, email, firstName, lastName and currency). If a user with the same email already exists or password has not correct format or password and confirmPassword don't match or currency has incorrect name, an appropriate exception will be thrown","operationId":"registerUserUsingPOST","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegistrationRequest"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/categories/expense":{"get":{"tags":["category-controller"],"summary":"Get expense categories by user email","description":"This code is an endpoint for retrieving income categories by user email. It takes in several parameters, including an authorization token, the user's email, a starting index (from) for pagination, and a maximum (size) number of results to return.","operationId":"getCategoriesExpenseUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"from","in":"query","description":"from","required":false,"style":"form","schema":{"type":"integer","format":"int32"}},{"name":"size","in":"query","description":"size","required":false,"style":"form","schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CategoryDto"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"put":{"tags":["category-controller"],"summary":"Update an existing expense category","description":"Updates an existing expense category for the user with the specified email.\n\nThe email should be provided as a request parameter and the updated category details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the updated category.","operationId":"updateCategoriesExpenseUsingPUT","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"post":{"tags":["category-controller"],"summary":"Create a new expense category","description":"Creates a new expense category for the user with the specified email.\n\nThe email should be provided as a request parameter and the category details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the created category.","operationId":"addCategoriesExpenseUsingPOST","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewCategoryDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/categories/expense/{categoryId}":{"get":{"tags":["category-controller"],"summary":"getCategoryExpenseById","operationId":"getCategoryExpenseByIdUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"categoryId","in":"path","description":"categoryId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"delete":{"tags":["category-controller"],"summary":"Delete an existing expense category","description":"Deletes an existing expense category for the user with the specified email.\n\nThe email should be provided as a request parameter and the category ID should be provided as a path variable.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns a ResponseEntity with a status code of 200 OK.","operationId":"deleteCategoriesExpenseUsingDELETE","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"categoryId","in":"path","description":"categoryId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}},"204":{"description":"No Content"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}}}},"/categories/income":{"get":{"tags":["category-controller"],"summary":"Get income categories by user email","description":"This code is an endpoint for retrieving income categories by user email. It takes in several parameters, including an authorization token, the user's email, a starting index (from) for pagination, and a maximum (size) number of results to return.","operationId":"getCategoriesIncomeUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"from","in":"query","description":"from","required":false,"style":"form","schema":{"type":"integer","format":"int32"}},{"name":"size","in":"query","description":"size","required":false,"style":"form","schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CategoryDto"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"put":{"tags":["category-controller"],"summary":"Update an existing income category","description":"Updates an existing income category for the user with the specified email.\n\nThe email should be provided as a request parameter and the updated category details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the updated category.","operationId":"updateCategoriesIncomeUsingPUT","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"post":{"tags":["category-controller"],"summary":"Create a new income category","description":"Creates a new income category for the user with the specified email.\n\nThe email should be provided as a request parameter and the category details should be provided in the request body.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns the created category.","operationId":"addCategoriesIncomeUsingPOST","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewCategoryDto"}}}},"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"201":{"description":"Created"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}},"/categories/income/{categoryId}":{"get":{"tags":["category-controller"],"summary":"getCategoryIncomeById","operationId":"getCategoryIncomeByIdUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"categoryId","in":"path","description":"categoryId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CategoryDto"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}},"delete":{"tags":["category-controller"],"summary":"Delete an existing income category","description":"Deletes an existing income category for the user with the specified email.\n\nThe email should be provided as a request parameter and the category ID should be provided as a path variable.\n\nIf the email provided in the request parameter does not match the email in the JWT token, a ForbiddenException will be thrown.\n\nReturns a ResponseEntity with a status code of 200 OK.","operationId":"deleteCategoriesIncomeUsingDELETE","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"categoryId","in":"path","description":"categoryId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}},"204":{"description":"No Content"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}}}},"/users/{userId}":{"get":{"tags":["user-controller"],"summary":"getUserById","operationId":"getUserByIdUsingGET","parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"email","required":true,"style":"form","schema":{"type":"string"}},{"name":"userId","in":"path","description":"userId","required":true,"style":"simple","schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserDto"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"}}}}},"components":{"schemas":{"AccountDto":{"title":"AccountDto","required":["amount","id","name"],"type":"object","properties":{"amount":{"type":"number","format":"float"},"createdOn":{"type":"string","format":"date-time"},"currency":{"type":"string"},"id":{"type":"integer","format":"int64"},"name":{"type":"string"}}},"AuthenticationRequest":{"title":"AuthenticationRequest","required":["email","password"],"type":"object","properties":{"email":{"type":"string","description":"User email","example":"test@mail.com"},"password":{"type":"string","description":"password","example":"12qwaszx!@QWASZX"}},"description":"Request for authentication"},"AuthenticationResponse":{"title":"AuthenticationResponse","type":"object","properties":{"token":{"type":"string","description":"token","example":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhcnRlbWV2MTk4NkBnbWFpbC5jb20iLCJleHAiOjE2ODAwMzcxNjB9.e127HkzxqERU9kRjJW-PsNb9jxEoSrZOLk34-m-_P9s"}},"description":"Response after successful authentication"},"CategoryDto":{"title":"CategoryDto","required":["id","name"],"type":"object","properties":{"id":{"type":"integer","description":"Category id","format":"int64","example":1},"name":{"type":"string","description":"Category name","example":"Category1"}},"description":"Short information about category"},"NewAccountDto":{"title":"NewAccountDto","required":["amount","name"],"type":"object","properties":{"amount":{"type":"number","format":"float"},"createdOn":{"type":"string","format":"date-time"},"currency":{"type":"string"},"name":{"type":"string"}}},"NewCategoryDto":{"title":"NewCategoryDto","required":["name"],"type":"object","properties":{"name":{"type":"string","description":"Category name","example":"Category1"}},"description":"New category"},"RegistrationRequest":{"title":"RegistrationRequest","required":["confirmPassword","currency","email","password"],"type":"object","properties":{"confirmPassword":{"type":"string","description":"confirmPassword","example":"12qwaszx!@QWASZX"},"currency":{"type":"string","description":"currency","example":"RUB_RUS"},"email":{"type":"string","description":"User email","example":"test@mail.com"},"firstName":{"type":"string","description":"first name","example":"Mikhail"},"lastName":{"type":"string","description":"Last name","example":"Stone"},"password":{"type":"string","description":"password","example":"12qwaszx!@QWASZX"}},"description":"Request for registration"},"UserDto":{"title":"UserDto","type":"object","properties":{"currency":{"type":"string","description":"Currency","example":"RUB_RUS","enum":["DOLLAR_USA","EURO_EU","RUB_BEL","RUB_RUS","TENGE_KAZ"]},"email":{"type":"string","description":"User email","example":"test@mail.com"},"firstName":{"type":"string","description":"first name","example":"Mikhail"},"id":{"type":"integer","description":"User ID","format":"int64","example":1},"lastName":{"type":"string","description":"Last name","example":"Stone"}},"description":"Short information about requested user"}}}}